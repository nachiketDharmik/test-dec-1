{"version":3,"sources":["serviceWorker.js","index.js","components/App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","props","_this","Object","C_Users_azazel_UdemyBlockchain_meme_of_the_day_Dapp_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","C_Users_azazel_UdemyBlockchain_meme_of_the_day_Dapp_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_Users_azazel_UdemyBlockchain_meme_of_the_day_Dapp_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","console","log","state","onSubmit","add","error","contract","methods","set","hash","send","from","account","r","memeHash","web3","loadWeb3","loadBlockchainData","ethereum","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","Meme","networks","Contract","abi","address","get","react__WEBPACK_IMPORTED_MODULE_7___default","className","href","rel","role","alt","src","concat","type","onChange","Component"],"mappings":"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","file":"static/js/main.9acd34bf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport Meme from '../abis/Meme.json'\n\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n   this.setState({ account: accounts[0] })\n   \n   //this.setState({ account: '0xE7b02482804C9364DD8F71b2488e852BC3efd9bD' })\n\n    const networkId = await web3.eth.net.getId()\n    const networkData = Meme.networks[networkId]\n    if(networkData) {\n      const contract = web3.eth.Contract(Meme.abi, networkData.address)\n      this.setState({ contract })\n      const memeHash = await contract.methods.get().call()\n      this.setState({ memeHash })\n    } else {\n      window.alert('Smart contract not deployed to detected network.')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      memeHash: '',\n      contract: null,\n      web3: null,\n      buffer: null,\n      account: null\n    }\n  }\n\n  captureFile = (event) => {\n    event.preventDefault()\n    const file = event.target.files[0]\n   // console.log(file);\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  onSubmit = (event) => {\n    event.preventDefault()\n    console.log(\"Submitting file to ipfs...\")\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log('Ipfs result', result)\n      //http://ipfs.infura.io/ipfs/QmPXEbneqC5X8WYNqnahBhk2uw94jtQu9uCoxkF258Fcsn\n      if(error) {\n        console.error(error)\n        return\n      }\n       this.state.contract.methods.set(result[0].hash).send({ from: this.state.account }).then((r) => {\n         return this.setState({ memeHash: result[0].hash })\n       })\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"http://www.dappuniversity.com/bootcamp\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Meme of the Day\n          </a>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                <a\n                  href=\"http://www.dappuniversity.com/bootcamp\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <img alt = ''  src={`https://ipfs.infura.io/ipfs/${this.state.memeHash}`} />\n                </a>\n                <p>&nbsp;</p>\n                <h2>Change Meme</h2>\n                <form onSubmit={this.onSubmit} >\n                  <input type='file' onChange={this.captureFile} />\n                  <input type='submit' />\n                </form>\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}